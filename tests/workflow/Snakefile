# https://snakemake.readthedocs.io/en/stable/tutorial/basics.html

import os


rule all:
    default_target: True
    input:
        'example/.completed',
        'errors/.all',


# ------------------------------------------------------------------------------------------------ #
#                                         Example workflow                                         #
# ------------------------------------------------------------------------------------------------ #

SAMPLES = ["A", "B"]

EXAMPLE_IN = config.get('in_dir', os.path.join(workflow.basedir, 'input'))


rule example:
    input:
        "example/plots/quals.svg"
    output: touch('example/.completed')


rule bwa_map:
    input:
        f"{EXAMPLE_IN}/genome.fa",
        f"{EXAMPLE_IN}/samples/{{sample}}.fastq"
    output:
        "example/mapped_reads/{sample}.bam"
    shell:
        # "bwa mem {input} | samtools view -Sb - > {output}"
        "touch {output}"


rule samtools_sort:
    input:
        "example/mapped_reads/{sample}.bam"
    output:
        "example/sorted_reads/{sample}.bam"
    shell:
        # "samtools sort -T sorted_reads/{wildcards.sample} "
        # "-O bam {input} > {output}"
        "cp {input} {output}"


rule samtools_index:
    input:
        "example/sorted_reads/{sample}.bam"
    output:
        "example/sorted_reads/{sample}.bam.bai"
    shell:
        # "samtools index {input}"
        "cp {input} {output}"


rule bcftools_call:
    input:
        fa=f"{EXAMPLE_IN}/genome.fa",
        bam=expand("example/sorted_reads/{sample}.bam", sample=SAMPLES),
        bai=expand("example/sorted_reads/{sample}.bam.bai", sample=SAMPLES)
    output:
        "example/calls/all.vcf"
    shell:
        # "bcftools mpileup -f {input.fa} {input.bam} | "
        # "bcftools call -mv - > {output}"
        "touch {output}"


rule plot_quals:
    input:
        "example/calls/all.vcf"
    output:
        "example/plots/quals.svg"
    # script:
    #     "scripts/plot-quals.py"
    shell:
        "touch {output}"


# ------------------------------------------------------------------------------------------------ #
#                                              Errors                                              #
# ------------------------------------------------------------------------------------------------ #


# Error in script
rule error_script:
    output: 'errors/.script'
    script: 'scripts/error-script.py'


# Error in run section
rule error_run:
    output: 'errors/.run'
    run:
        raise RuntimeError('Planned error')


# Error in shell section
rule error_shell:
    output: 'errors/.shell'
    shell:
        """
        echo Planned error:
        false
        """

rule errors:
    input:
        'errors/.script',
        'errors/.run',
        'errors/.shell',
    output: 'errors/.all'

